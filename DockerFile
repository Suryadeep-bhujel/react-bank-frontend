# Multi-stage Dockerfile for building a JS frontend and serving with nginx (suitable for AWS ECS)

FROM node:18-alpine AS build
WORKDIR /app
ENV PATH /app/node_modules/.bin:$PATH

# Install dependencies
COPY package*.json ./
RUN npm ci --silent

# Copy source and build (expects "npm run build" to produce a "build" directory)
COPY . .
ARG NODE_ENV=production
ENV NODE_ENV=$NODE_ENV
RUN npm run build --if-present

# Final image: lightweight nginx serving a single-page app
FROM nginx:stable-alpine
ENV PORT=80
EXPOSE 80

# Remove default conf and copy built assets
RUN rm -f /etc/nginx/conf.d/default.conf
COPY --from=build /app/build /usr/share/nginx/html

# SPA-friendly nginx config (serves index.html for client-side routes)
RUN cat > /etc/nginx/conf.d/default.conf <<'EOF'
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    charset utf-8;

    # Serve static files directly, fallback to index.html for SPA routing
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Caching for static assets
    location ~* \.(?:css|js|jpg|jpeg|gif|png|svg|ico|woff2?|ttf|eot)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
}
EOF

# Ensure nginx can read the files
RUN chown -R nginx:nginx /usr/share/nginx/html || true

CMD ["nginx", "-g", "daemon off;"]